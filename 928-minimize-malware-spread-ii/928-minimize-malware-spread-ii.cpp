class Solution {
public:
    
    int Parent[305];
    int Size[305];
    
    int find(int x){
        
        if(Parent[x]==x){
            return x;
        }
        
        int temp=find(Parent[x]);
        
        Parent[x]=temp;
        
        return temp;
        
    }
    
    
    void Union(int x,int y){
        
        int lx=find(x);
        int ly=find(y);
        
        if(lx!=ly){
            
            if(Size[lx]>Size[ly]){
                Size[lx]+=Size[ly];
                Parent[ly]=lx;
            }
            
            else{
                Size[ly]+=Size[lx];
                Parent[lx]=ly;
            }
            
        }
        
    }
    
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        int n=graph.size();
        
        for(int i=0;i<n;i++){
            Parent[i]=i;
            Size[i]=1;
        }
        
        set<int>st;
        
        for(int e:initial){
            st.insert(e);
        }
        
        vector<int>indegree(n,0);
        
        unordered_map<int,set<int>>mp;
        
        for(int i=0;i<n;i++){
            
            for(int j=0;j<n;j++){
                
                if(graph[i][j]==1 && i!=j && st.find(i)==st.end() && st.find(j)==st.end()){
                    
                    int p1=find(i);
                    int p2=find(j);
                    
                    Union(p1,p2);
                    
                }
                
            }
            
        }
        
        
        for(int u:initial){
            
            for(int j=0;j<n;j++){
                
                if(graph[u][j]==1 && u!=j && st.find(j)==st.end()){
                    
                    int p=find(j);
                    
                    if(mp[u].find(p)==mp[u].end()){
                        
                        mp[u].insert(p);
                        
                        indegree[p]++;
                        
                    }
                    
                }
                
            }
            
        }
        
        
        int maxsize=-1,res=n+1;
        
        
        for(int u:initial){
            
            auto pars=mp[u];
            
            int currsize=0;
            
            for(int p:pars){
                
                if(indegree[p]==1){
                    
                    currsize+=Size[p];
                    
                }
                
            }
            
            if(currsize>maxsize){
                maxsize=currsize;
                res=u;
            }
            
            else if(currsize==maxsize){
                maxsize=currsize;
                res=min(res,u);
            }
            
        }
        
        if(res==n+1){
            
            for(int u:initial){
                res=min(res,u);
            }
            
        }
        
        return res;
        
    }
};