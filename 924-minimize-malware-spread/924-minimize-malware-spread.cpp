class Solution {
public:
    
    int Parent[305];
    int Size[305];
    
    int find(int x){
        
        if(Parent[x]==x){
            return x;
        }
        
        int temp=find(Parent[x]);
        
        return Parent[x]=temp;
        
    }
    
    void Union(int x,int y){
        
        int lx=find(x);
        int ly=find(y);
        
        if(lx!=ly){
            
            if(Size[lx]>Size[ly]){
                Size[lx]+=Size[ly];
                Parent[ly]=lx;
            }
            
            else{
                Size[ly]+=Size[lx];
                Parent[lx]=ly;
            }
            
        }
        
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        int n=graph.size();
        
        for(int i=0;i<n;i++){
            Parent[i]=i;
            Size[i]=1;
        }
        
        for(int i=0;i<n;i++){
            
            for(int j=0;j<n;j++){
                
                if(graph[i][j]==1 && i!=j){
                    
                    int p1=find(i);
                    int p2=find(j);
                    
                    Union(p1,p2);
                    
                }
                
            }
            
        }
        
        
        int res=n+1;
        int maxsize=0;
        
        vector<int>indegree(n,0);
        
        for(int e:initial){
            
            int p=find(e);
            
            indegree[p]++;
            
        }
        
        // for(int i=0;i<n;i++){
        //     cout<<indegree[i]<<" ";
        // }cout<<endl;
        
        
        for(int e:initial){
            
            int p=find(e);
            
            if(indegree[p]==1){
                
                int currsize=Size[p];
                
                if(currsize>maxsize){
                    maxsize=currsize;
                    res=e;
                }
                
                else if(currsize==maxsize){
                    maxsize=currsize;
                    res=min(res,e);
                }
                
            }
            
        }
        
        if(res==n+1){
            
            for(int e:initial){
                res=min(res,e);
            }
            
        }
        
        return res;
        
    }
};